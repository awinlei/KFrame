#ifndef __KF_UUID_DATA_H__
#define __KF_UUID_DATA_H__

#include "KFDefine.h"

namespace KFrame
{
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /*
    +------+---------------+----------+----------------+----------+
    | sign | delta seconds | zone id  | worker node id | sequence |
    +------+---------------+----------+----------------+----------+
    | 1bit |     29bits    |  10bits  |     10bits      |  14bits  |
    +------+---------------+----------+----------------+----------+
    */

    // 默认
    // 1	符号位
    // 29	时间( 大概可以支持17年, 可以修改项目开始时间 )
    // 10	zoneid  可以支持1023个小区不会重复
    // 10	workerid 1023个工作者进程不会重复
    // 14	序列号 同一进程1秒钟内超过‭16383‬个就会重复 -- 应该不可能, 除非你要疯
    // 可以保证同一模块生成的guid不相同, 不同模块可能会一样
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    class KFUuidData;
    class KFUuidGenerate
    {
    public:
        KFUuidGenerate( const KFUuidData* data );
        ~KFUuidGenerate() = default;
        ///////////////////////////////////////////////////////////////////////////////////////////////
        ///////////////////////////////////////////////////////////////////////////////////////////////
        // 生产guid
        uint64 Make( uint32 zoneid, uint32 workerid, uint64 nowtime );

        // 获得zoneid
        uint32 ZoneId( uint64 uuid );

        // 解析guid( time, zone, worker, seq )
        std::tuple<uint64, uint32, uint32, uint32> Parse( uint64 uuid );

    private:
        // uuid 配置
        const KFUuidData* _data = nullptr;

        // 上一次时间
        uint64 _last_time = 0u;

        // 序列号
        uint32 _sequence = 0u;
    };
}

#endif
